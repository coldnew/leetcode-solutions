#!/bin/bash
#
# clang-format-all: a tool to run clang-format on an entire project
# Copyright (C) 2016 Evan Klitzke <evan@eklitzke.org>
# Copyright (C) 2022 Yen-Chin, Lee <coldnew.tw@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# SDIR store this script path
SDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# PDIR is the project top dir
PDIR=$(dirname "${SDIR}")

# TDIR stores all target dirs for clang-format
TDIR=(
    "${PDIR}/src"
)

# Variable that will hold the name of the clang-format command
FMT="clang-format"

# Check if we found a working clang-format
if ! command -v clang-format &> /dev/null
then
    echo "Error: clang-format could not be found, please install it first!"
    exit
fi

# Check all of the arguments first to make sure they're all directories
for dir in "$@"; do
    if [ ! -d "${dir}" ]; then
        echo "${dir} is not a directory"
        usage
    fi
done

# Find a dominating file, starting from a given directory and going up.
find-dominating-file() {
    if [ -r "$1"/"$2" ]; then
        return 0
    fi
    if [ "$1" = "/" ]; then
        return 1
    fi
    find-dominating-file "$(realpath "$1"/..)" "$2"
    return $?
}

# Run clang-format -i on all of the things
for dir in "${TDIR[@]}"; do
    if [ -d "$dir" ]; then
	pushd "${dir}" &>/dev/null
	if ! find-dominating-file . .clang-format; then
            echo "Failed to find dominating .clang-format starting at $PWD"
            continue
	fi
	find . \
             \( -name '*.c' \
             -o -name '*.cc' \
             -o -name '*.cpp' \
             -o -name '*.h' \
             -o -name '*.hh' \
             -o -name '*.hpp' \) \
             -exec "${FMT}" -i '{}' \;
	popd &>/dev/null
    else
	echo "Dir $dir not exist, skipped..."
    fi
done
